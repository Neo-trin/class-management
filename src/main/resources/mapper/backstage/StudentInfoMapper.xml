<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myclass.dao.backstage.StudentInfoMapper">

    <resultMap type="StudentInfo" id="StudentInfoMap">
        <result property="stuNo" column="stuNo" jdbcType="VARCHAR"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="classID" column="classID" jdbcType="INTEGER"/>
        <association property="createTeacher" column="createTeacher" javaType="TeacherInfo">
            <id property="id" column="createTeacher"></id>
            <result property="name" column="teacherName" jdbcType="VARCHAR"/>
        </association>
        <association property="classId" column="classID" javaType="ClassInfo">
            <id property="id" column="classID" jdbcType="INTEGER"/>
            <result property="name" column="className" jdbcType="VARCHAR"/>
            <result property="gradeID" column="gradeID" jdbcType="INTEGER"/>
            <result property="gradeName" column="gradeName" jdbcType="VARCHAR"/>
        </association>
    </resultMap>

    <sql id="queryFull">
     select student.stuNo,
        student.loginName,
        student.pwd,
        student.name,
        student.classID,
        class.name as 'className',
        class.gradeID,
        dataGrade.valueName as 'gradeName',
        IFNULL(student.sex, '?') as sex,
        student.idCard,
        student.birthday,
        student.phone,
        student.headImg,
        student.headTemp,
        student.isHeadPass,
        dataHeadStatus.valueName as 'headStatusName',
        student.provinceCode,
        IFNULL(province.name, '未知') as 'provinceName',
        student.cityCode,
        city.name as 'cityName',
        student.areaCode,
        area.name as 'areaName',
        student.address,
        student.signature,
        student.createTime,
        student.createTeacher,
        teacher.name as 'teacherName',
        student.lastLoginTime,
        student.status,
        dataStatus.valueName as 'studentStatus',
        student.ipAddress,
        student.modifyTime,
        student.remark
        from studentInfo student
        join classInfo class on class.id = student.classID
        join teacherInfo teacher on teacher.id = student.createTeacher
        join dataDictionary dataStatus
        on dataStatus.typeCode = 'STU_STATUS' and
        dataStatus.valueId = student.status
        join dataDictionary dataGrade
        on dataGrade.typeCode = 'GRADE' and dataGrade.valueId = class.gradeID
        left join dataDictionary dataHeadStatus
        on dataHeadStatus.typeCode = 'H_STATUS' and
        dataHeadStatus.valueId = student.isHeadPass
        left join province province on province.code = student.provinceCode
        left join area area on area.code = student.areaCode
        left join city city on city.code = student.cityCode
    </sql>

    <insert id="insertStudentInfo" parameterType="StudentInfo">
        insert into studentInfo(stuNo, loginName, name, pwd, classID, idCard, createTime, createTeacher, status, remark)
        values (#{stuNo}, #{loginName}, #{name}, #{pwd}, #{classID}, #{idCard}, now(), #{createTeacher.id}, #{status}, #{remark});
    </insert>

    <!--通过主键修改数据-->
    <update id="updateStudentInfo" parameterType="StudentInfo">
        update myClass.studentInfo
        <set>
            <if test="loginName != null and loginName != ''">
                loginName = #{loginName},
            </if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="pwd != null and pwd != ''">
                pwd = #{pwd},
            </if>
            <if test="classId != null">
                classID = #{classId},
            </if>
            <if test="sex != null and sex != ''">
                sex = #{sex},
            </if>
            <if test="idCard != null and idCard != ''">
                idCard = #{idCard},
            </if>
            <if test="birthday != null">
                birthday = #{birthday},
            </if>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
            <if test="headImg != null and headImg != ''">
                headImg = #{headImg},
            </if>
            <if test="headTemp != null and headTemp != ''">
                headTemp = #{headTemp},
            </if>
            <if test="isHeadPass != null">
                isHeadPass = #{isHeadPass},
            </if>
            <if test="provinceCode != null and provinceCode != ''">
                provinceCode = #{provinceCode},
            </if>
            <if test="cityCode != null and cityCode != ''">
                cityCode = #{cityCode},
            </if>
            <if test="areaCode != null and areaCode != ''">
                areaCode = #{areaCode},
            </if>
            <if test="address != null and address != ''">
                address = #{address},
            </if>
            <if test="signature != null and signature != ''">
                signature = #{signature},
            </if>
            <if test="createTime != null">
                createTime = #{createTime},
            </if>
            <if test="createTeacher != null">
                createTeacher = #{createTeacher.id},
            </if>
            <if test="lastLoginTime != null">
                lastLoginTime = #{lastLoginTime},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="ipAddress != null and ipAddress != ''">
                ipAddress = #{ipAddress},
            </if>
            <if test="modifyTime != null">
                modifyTime = #{modifyTime},
            </if>
            <if test="remark != null and remark != ''">
                remark = #{remark},
            </if>
        </set>
        where stuNo = #{stuNo}
    </update>

    <update id="updateLastLoginTimeByStuNo">
        update myClass.studentInfo
        <set>
            lastLoginTime = now()
        </set>
        <where>
            stuNo = #{stuNo}
        </where>
    </update>

    <update id="updateStatusBatch">
        update studentInfo
        <set>
            status = #{status}
        </set>
        <where>
            stuNo in
            <foreach collection="arrStuNo" item="no" open="(" separator="," close=")">
                #{no}
            </foreach>
        </where>
    </update>

    <select id="getStudentInfo" resultMap="StudentInfoMap">
        select stuNo,
        loginName,
        pwd,
        name,
        classID,
        className,
        gradeID,
        gradeName,
        sex,
        idCard,
        birthday,
        phone,
        headImg,
        headTemp,
        isHeadPass,
        headStatusName,
        provinceCode,
        provinceName,
        cityCode,
        cityName,
        areaCode,
        areaName,
        address,
        signature,
        createTime,
        createTeacher,
        teacherName,
        lastLoginTime,
        status,
        studentStatus,
        ipAddress,
        modifyTime,
        remark
        from (
        <include refid="queryFull"></include>
        ) t1
        <where>
            <!--<if test="studentInfo != null">-->
                <if test="loginName != null and loginName != ''">
                    and loginName = #{loginName}
                </if>
                <if test="pwd != null and pwd != ''">
                    and pwd = #{pwd}
                </if>
                <if test="classId != null">
                    <if test="classId.id != 0 and classId.id != null">
                        and classID = #{classId.id}
                    </if>
                    <if test="classId.gradeID != null and classId.gradeID != 0">
                        and gradeID = #{classId.gradeID}
                    </if>
                </if>
         <!--</if>-->
        </where>
    </select>

    <select id="getMaxStuNo" parameterType="String" resultType="Integer">
        select MAX(CAST(SUBSTRING(stuNo, 9) as unsigned))
        from studentInfo
        <where>
            stuNo like CONCAT(#{prefix}, '%');
        </where>
    </select>

    <select id="listStudentInfo" resultMap="StudentInfoMap">
        select stuNo,
        loginName,
        name,
        classID,
        className,
        gradeID,
        gradeName,
        sex,
        idCard,
        birthday,
        phone,
        headImg,
        headTemp,
        isHeadPass,
        headStatusName,
        provinceCode,
        provinceName,
        cityCode,
        cityName,
        areaCode,
        areaName,
        address,
        signature,
        createTime,
        createTeacher,
        teacherName,
        lastLoginTime,
        status,
        studentStatus,
        ipAddress,
        modifyTime,
        remark
        from (
        <include refid="queryFull"></include>
        ) t1
        <where>
            <if test="studentInfo != null">
                <if test="studentInfo.stuNo != null and studentInfo.stuNo != ''">
                    and stuNo like concat('%',#{studentInfo.stuNo},'%')
                </if>
                <if test="studentInfo.name != null and studentInfo.name != ''">
                    and name like concat('%',#{studentInfo.name},'%')
                </if>
                <if test="studentInfo.sex != null and studentInfo.sex != ''">
                    and sex = #{studentInfo.sex}
                </if>
                <if test="studentInfo.phone != null and studentInfo.phone != ''">
                    and phone like concat('%',#{studentInfo.phone},'%')
                </if>
                <if test="studentInfo.classId != null">
                    <if test="studentInfo.classId.id != 0 and studentInfo.classId.id != null">
                        and classID = #{studentInfo.classId.id}
                    </if>
                    <if test="studentInfo.classId.gradeID != null and studentInfo.classId.gradeID != 0">
                        and gradeID = #{studentInfo.classId.gradeID}
                    </if>
                </if>
            </if>
        </where>
        <if test="orderCol != null and orderCol != '' and orderType != null and orderType != ''">
            order by CONVERT(`${orderCol}` using gbk) ${orderType}
        </if>
    </select>
</mapper>